{"version":3,"file":"static/js/54.2758a77a.chunk.js","mappings":"iLACA,GAAgB,cAAgB,qCAAqC,kBAAoB,yCAAyC,kBAAoB,yCAAyC,kBAAoB,yCAAyC,WAAa,kCAAkC,aAAe,qC,4BCK7SA,EAAoB,SAAC,GAGd,IAFlBC,EAEiB,EAFjBA,MAGMC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,eAAIC,UAAWC,EAAAA,kBAAf,UACE,UAAC,KAAD,CACED,UAAWC,EAAAA,kBACXC,GAAE,kBAAaL,EAAMM,IACrBC,MAAO,CAAEC,KAAMP,GAHjB,WAKE,gBACEQ,IAAG,yCAAoCT,EAAMU,aAC7CC,IAAKX,EAAMY,eACXC,MAAM,MACNV,UAAWC,EAAAA,SAEb,gBAAKD,UAAWC,EAAAA,aAAhB,UACE,iBAAMD,UAAWC,EAAAA,WAAjB,SAAqCJ,EAAMc,gBCpBxCC,EAAgB,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,OAC9B,OACE,gBAAKb,UAAWC,EAAAA,cAAhB,UACE,eAAID,UAAWC,EAAAA,kBAAf,SACGY,EAAOC,KAAI,SAAAjB,GAAK,OACf,SAACD,EAAD,CAAmBC,MAAOA,GAAYA,EAAMM,a,qDCT/C,IAAMY,EAAS,SAACC,GACrB,OAAOA,EAAKC,OAAOH,KACjB,kBAA4E,CAC1EX,GADF,EAAGA,GAEDQ,MAFF,EAAOA,MAGLO,SAHF,EAAcA,SAIZC,UAJF,EAAwBA,UAKtBC,aALF,EAAmCA,aAMjCC,KANF,EAAiDA,W,gICHrD,EAA4B,6BAA5B,EAAsE,8BAAtE,EAAmH,gCAAnH,EAAuK,qCAAvK,EAA8N,mC,SCGjNC,EAAe,SAAC,GAAkE,IAAhEC,EAA+D,EAA/DA,SAC7B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAcA,OACE,mBAAQ1B,UAAWC,EAAnB,UACE,kBAAMsB,SAZW,SAACI,GACpBA,EAAMC,iBACe,KAAjBH,EAAMI,QAIVN,EAASE,GACTC,EAAS,KAJPI,EAAAA,GAAAA,MAAY,8BASkB9B,UAAWC,EAAzC,WACE,mBAAQ8B,KAAK,SAAS/B,UAAWC,EAAjC,UACE,iBAAMD,UAAWC,EAAjB,uBAEF,kBACED,UAAWC,EACX8B,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,SAzBc,SAACR,GACrBD,EAASC,EAAMS,cAAcC,MAAMC,wB,mBCmCvC,EAjCoB,WAClB,OAA4Bd,EAAAA,EAAAA,UAAmC,MAA/D,eAAOX,EAAP,KAAe0B,EAAf,KACMC,GAAcC,EAAAA,EAAAA,MACpB,GAA0BjB,EAAAA,EAAAA,WAAS,kCAAMgB,EAAY,GAAGE,IAAI,gBAAzB,QAAqC,MAAxE,eAAOjB,EAAP,KAAcC,EAAd,KACMiB,GAAWC,EAAAA,EAAAA,OAGjBC,EAAAA,EAAAA,YAAU,WACRpB,GAASqB,OAEX,IAAMA,EAAY,YACjBC,EAAAA,EAAAA,IAAkBtB,GAAOuB,MAAK,YAAe,IAAZhC,EAAW,EAAXA,KACT,KAAb,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMiC,QAIVV,GAAUxB,EAAAA,EAAAA,GAAOC,IAHfc,EAAAA,GAAAA,MAAA,gEAYN,OACE,iCACE,SAACR,EAAD,CAAcC,SAPD,SAACE,GAChBC,EAASD,GACTkB,EAAS,CAAEO,OAAO,UAAD,OAAYzB,QAM1BZ,IAAU,SAACD,EAAA,EAAD,CAAeC,OAAQA","sources":["webpack://goit-react-hw-05-movies/./src/components/MoviesGallery/MoviesGallery.module.css?276e","components/MoviesGallery/MoviesGalleryItem.tsx","components/MoviesGallery/MoviesGallery.tsx","utils/mapper.ts","webpack://goit-react-hw-05-movies/./src/components/SearchMovies/Searchbar.module.css?b637","components/SearchMovies/SearchMovies.tsx","views/PageSearch/PageSearch.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"MoviesGallery\":\"MoviesGallery_MoviesGallery__tqAIU\",\"MoviesGalleryList\":\"MoviesGallery_MoviesGalleryList__pjh-c\",\"MoviesGalleryItem\":\"MoviesGallery_MoviesGalleryItem__+mbjI\",\"GalleryItemMovies\":\"MoviesGallery_GalleryItemMovies__LW-jm\",\"movieTitle\":\"MoviesGallery_movieTitle__Lnio6\",\"titleWrapper\":\"MoviesGallery_titleWrapper__dy8hb\"};","import React from 'react';\nimport styles from '../MoviesGallery/MoviesGallery.module.css';\nimport { Link, useLocation } from 'react-router-dom';\nimport { IData } from '../../interfaces';\n// import PropTypes from 'prop-types';\n\nexport const MoviesGalleryItem = ({\n  movie,\n}: {movie: Partial<IData>\n}): JSX.Element => {\n  const location = useLocation();\n\n  return (\n    <li className={styles.MoviesGalleryItem}>\n      <Link\n        className={styles.GalleryItemMovies}\n        to={`/movies/${movie.id}`}\n        state={{ from: location }}\n      >\n        <img\n          src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`}\n          alt={movie.original_title}\n          width=\"300\"\n          className={styles.image}\n        />\n        <div className={styles.titleWrapper}>\n          <span className={styles.movieTitle}>{movie.title}</span>\n        </div>\n      </Link>\n    </li>\n  );\n};\n\n// MoviesGalleryItem.propTypes = {\n//   movie: PropTypes.object.isRequired,\n// };\n","import React from 'react';\nimport { MoviesGalleryItem } from './MoviesGalleryItem';\nimport styles from '../MoviesGallery/MoviesGallery.module.css';\nimport { IData } from '../../interfaces';\n// import PropTypes from 'prop-types';\n\nexport const MoviesGallery = ({ movies }:{ movies: Partial<IData>[] }) => {\n  return (\n    <div className={styles.MoviesGallery}>\n      <ul className={styles.MoviesGalleryList}>\n        {movies.map(movie => (\n          <MoviesGalleryItem movie={movie} key={movie.id} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n// MoviesGallery.propTypes = {\n//   movies: PropTypes.array.isRequired,\n// };\n","import { IData } from \"../interfaces\";\n\nexport const mapper = (data: { result: Partial<IData>[] }) => {\n  return data.result.map(\n    ({ id, title, overwiev, genre_ids, vote_average, name }):Partial<IData> => ({\n      id,\n      title,\n      overwiev,\n      genre_ids,\n      vote_average,\n      name,\n    })\n  );\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"Searchbar_searchbar__29YDU\",\"searchForm\":\"Searchbar_searchForm__-PtX4\",\"searchButton\":\"Searchbar_searchButton__vzaQP\",\"searchButtonLabel\":\"Searchbar_searchButtonLabel__87xus\",\"searchFormInput\":\"Searchbar_searchFormInput__hzTdt\"};","import React,{ useState } from 'react';\nimport styles from '../SearchMovies/Searchbar.module.css';\nimport { toast } from 'react-toastify';\n\nexport const SearchMovies = ({ onSubmit }: {onSubmit: (arg: string) => void}): JSX.Element => {\n  const [query, setQuery] = useState('');\n  const handleChanger = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.currentTarget.value.toLowerCase());\n  };\n  const handleSubmit = (event: React.MouseEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (query.trim() === '') {\n      toast.error('Please enter search query');\n      return;\n    }\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <header className={styles.searchbar}>\n      <form onSubmit={handleSubmit} className={styles.searchForm}>\n        <button type=\"submit\" className={styles.searchButton}>\n          <span className={styles.searchButtonLabel}>Search</span>\n        </button>\n        <input\n          className={styles.searchFormInput}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search films \"\n          onChange={handleChanger}\n        />\n      </form>\n    </header>\n  );\n};\n\n// SearchMovies.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n","import React,{ useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport {fetchSearchMovies} from '../../API/MoviesApi';\nimport {SearchMovies} from \"../../components/SearchMovies/SearchMovies\";\nimport { MoviesGallery } from '../../components/MoviesGallery/MoviesGallery';\nimport { IData } from '../../interfaces';\nimport { mapper } from '../../utils/mapper';\n\n const  PageSearch =():JSX.Element => {\n  const [movies, setMovies] = useState<Partial<IData>[] | null >(null);\n  const searchParam = useSearchParams();\n  const [query, setQuery] = useState(() => searchParam[0].get('query') ?? '');\n  const navigate = useNavigate();\n  // const location = useLocation();\n\n  useEffect(() => {\n    query && getMovies();\n  });\n  const getMovies = () => {\n   fetchSearchMovies(query).then(({ data }) => {\n      if (data?.length === 0) {\n        toast.error(`There are is no results found.Please try another request`);\n        return;\n      }\n      setMovies(mapper(data));\n    });\n  };\n\n  const onSubmit = (query: string) => {\n    setQuery(query);\n    navigate({ search: `?query=${query}` });\n  };\n\n  return (\n    <>\n      <SearchMovies onSubmit={onSubmit}  />\n      {movies && <MoviesGallery movies={movies}  />}\n    </>\n  );\n}\n\nexport default PageSearch"],"names":["MoviesGalleryItem","movie","location","useLocation","className","styles","to","id","state","from","src","poster_path","alt","original_title","width","title","MoviesGallery","movies","map","mapper","data","result","overwiev","genre_ids","vote_average","name","SearchMovies","onSubmit","useState","query","setQuery","event","preventDefault","trim","toast","type","autoComplete","autoFocus","placeholder","onChange","currentTarget","value","toLowerCase","setMovies","searchParam","useSearchParams","get","navigate","useNavigate","useEffect","getMovies","fetchSearchMovies","then","length","search"],"sourceRoot":""}